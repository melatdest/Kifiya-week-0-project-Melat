# -*- coding: utf-8 -*-
"""10_Acadamy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UC_BZdYMbW-u_mQfL1jG5sZ8I5C6tA3U
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
# Mount your Google Drive
drive.mount('/content/drive')

# Once mounted, you can access your Drive files at '/content/drive/My Drive'
print("Drive mounted successfully!")

# Load the dataset
data1 = pd.read_csv('/content/drive/MyDrive/benin-malanville.csv')
data2 = pd.read_csv('/content/drive/MyDrive/sierraleone-bumbuna.csv')
data3= pd.read_csv('/content/drive/MyDrive/togo-dapaong_qc.csv')

# Basic EDA for data1
print(data1.info())
print(data1.describe())

df = pd.read_csv('/content/drive/MyDrive/benin-malanville.csv')
print(df.head())

"""1. Identifying Outliers"""

# Select only numeric columns for quantile calculations
numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Calculate the quantiles for numeric columns
Q1 = df[numeric_columns].quantile(0.25)
Q3 = df[numeric_columns].quantile(0.75)
IQR = Q3 - Q1

# Identifying outliers
outliers = ((df[numeric_columns] < (Q1 - 1.5 * IQR)) | (df[numeric_columns] > (Q3 + 1.5 * IQR)))

# Print out the results
print("Outliers detected in columns:")
print(outliers.sum())

"""**1.Distribution of Solar Irradiation Metrics**

Columns: GHI (Global Horizontal Irradiance), DNI (Direct Normal Irradiance), and DHI (Diffuse Horizontal Irradiance).

Purpose: Identify patterns and ranges of solar irradiance values.
"""

plt.figure(figsize=(12, 6))
sns.histplot(data1['GHI'], kde=True, color='gold', label='GHI')
sns.histplot(data1['DNI'], kde=True, color='orange', label='DNI')
sns.histplot(data1['DHI'], kde=True, color='skyblue', label='DHI')
plt.title('Distribution of Solar Irradiance Metrics benin-malanville')
plt.xlabel('Irradiance (W/m²)')
plt.ylabel('Frequency')
plt.legend()
plt.show()

"""**2.Temporal Analysis of Solar Irradiance**

Column: Timestamp vs GHI, DNI, and DHI.

Purpose: Analyze how solar irradiance varies over time.
"""

# Convert Timestamp to datetime
data1['Timestamp'] = pd.to_datetime(data1['Timestamp'])

# Aggregate daily averages
daily_data1 = data1.groupby(data1['Timestamp'].dt.date).mean()

# Plot daily trends
plt.figure(figsize=(14, 7))
plt.plot(daily_data1.index, daily_data1['GHI'], label='GHI', color='gold')
plt.plot(daily_data1.index, daily_data1['DNI'], label='DNI', color='orange')
plt.plot(daily_data1.index, daily_data1['DHI'], label='DHI', color='skyblue')
plt.title('Daily Average Solar Irradiance')
plt.xlabel('Date')
plt.ylabel('Irradiance (W/m²)')
plt.legend()
plt.show()

"""**3. Correlation Heatmap**

Columns: All numerical columns.

Purpose: Identify relationships between solar irradiance and other environmental factors (e.g., Tamb, RH, WS).
"""

# Compute correlation matrix
corr_matrix = data1.corr()

# Plot heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', cbar=True)
plt.title('Correlation Matrix')
plt.show()

"""**5. Seasonal Trends**

Columns: Extract month and season from Timestamp and analyze GHI.
Purpose: Determine seasonal variations in solar potential.
"""

# Extract month and season
data1['Month'] = data1['Timestamp'].dt.month
data1['Season'] = data1['Month'].apply(lambda x: 'Winter' if x in [12, 1, 2] else
                                                 'Spring' if x in [3, 4, 5] else
                                                 'Summer' if x in [6, 7, 8] else
                                                 'Autumn')

# Boxplot by season
plt.figure(figsize=(10, 6))
sns.boxplot(x='Season', y='GHI', data=data1, palette='muted')
plt.title('Seasonal Variation in GHI')
plt.xlabel('Season')
plt.ylabel('GHI (W/m²)')
plt.show()

"""**6.Wind Speed and Solar Irradiance Relationship**

Columns: WS (Wind Speed) vs GHI.

Purpose: Determine if wind speed impacts solar potential.
"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x='WS', y='GHI', data=data1, alpha=0.5, color='green')
plt.title('Wind Speed vs Solar Irradiance (GHI)')
plt.xlabel('Wind Speed (m/s)')
plt.ylabel('GHI (W/m²)')
plt.show()

"""**7. Compare Module Performance**
Columns: ModA, ModB, TModA, TModB.

Purpose: Assess the performance of solar modules.




"""

plt.figure(figsize=(10, 6))
sns.lineplot(data=data1[['ModA', 'ModB']], palette='coolwarm')
plt.title('Module Performance (ModA vs ModB)')
plt.xlabel('Time')
plt.ylabel('Output (W)')
plt.legend(['ModA', 'ModB'])
plt.show()

# Basic EDA for data2
print(data2.info())
print(data2.describe())

plt.figure(figsize=(12, 6))
sns.histplot(data2['GHI'], kde=True, color='gold', label='GHI')
sns.histplot(data2['DNI'], kde=True, color='orange', label='DNI')
sns.histplot(data2['DHI'], kde=True, color='skyblue', label='DHI')
plt.title('Distribution of Solar Irradiance Metrics sierraleone-bumbuna')
plt.xlabel('Irradiance (W/m²)')
plt.ylabel('Frequency')
plt.legend()
plt.show()

"""2.Temporal Analysis of Solar Irradiance for sierraleone-bumbuna

Column: Timestamp vs GHI, DNI, and DHI.

Purpose: Analyze how solar irradiance varies over time.
"""

# Convert Timestamp to datetime
data2['Timestamp'] = pd.to_datetime(data2['Timestamp'])

# Aggregate daily averages
daily_data2 = data2.groupby(data2['Timestamp'].dt.date).mean()

# Plot daily trends
plt.figure(figsize=(14, 7))
plt.plot(daily_data1.index, daily_data1['GHI'], label='GHI', color='gold')
plt.plot(daily_data1.index, daily_data1['DNI'], label='DNI', color='orange')
plt.plot(daily_data1.index, daily_data1['DHI'], label='DHI', color='skyblue')
plt.title('Daily Average Solar Irradiance for sierralone-bumbuna')
plt.xlabel('Date')
plt.ylabel('Irradiance (W/m²)')
plt.legend()
plt.show()

"""3. Correlation Heatmap for sierralone-bumbuna

Columns: All numerical columns.

Purpose: Identify relationships between solar irradiance and other environmental factors (e.g., Tamb, RH, WS).
"""

corr_matrix = data2.corr()

# Plot heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', cbar=True)
plt.title('Correlation Matrix sierralone-bumbuna ')
plt.show()

"""4. Seasonal Trends
Columns: Extract month and season from Timestamp and analyze GHI.
Purpose: Determine seasonal variations in solar potential.
"""



















# Basic EDA for data3
print(data3.info())
print(data3.describe())

plt.figure(figsize=(12, 6))
sns.histplot(data3['GHI'], kde=True, color='gold', label='GHI')
sns.histplot(data3['DNI'], kde=True, color='orange', label='DNI')
sns.histplot(data3['DHI'], kde=True, color='skyblue', label='DHI')
plt.title('Distribution of Solar Irradiance Metrics togo-dapaong_qc')
plt.xlabel('Irradiance (W/m²)')
plt.ylabel('Frequency')
plt.legend()
plt.show()